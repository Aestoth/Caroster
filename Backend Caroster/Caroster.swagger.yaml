swagger: '2.0'
info:
  description: API de covoiturage
  version: 1.0.0
  title: Caroster
host: caroster.test.octr.ee
basePath: /api
schemes:
  - https
  - http
paths:
  /event:
    post:
      tags:
      - "Event"
      summary: Add an Event
      description: ''
      operationId: addEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/Event'
      responses:
        200:
          description: successful operation
        422:
          description: Invalid title/email. Make sure Fields are not empty
  '/event/{eventId}':
    get:
      tags:
      - "Event"
      summary: Find Event by id
      description: ''
      operationId: getEventById
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: Event Id
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Event'
        404:
          description: Event not found
    delete:
      tags:
      - "Event"
      summary: Delete an Event
      description: ''
      operationId: deleteEvent
      produces:
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: eventId
          in: path
          description: ''
          required: true
          type: string
      responses:
        400:
          description: ID not valid
        404:
          description: Event not found
    put:
      tags:
      - "Event"
      summary: Update Event Data
      description: ''
      operationId: updateEvent
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: ''
          required: true
          type: string
        - name: title
          in: formData
          description: Update name of event
          required: false
          type: string
        - name: email
          in: formData
          description: Update email of event
          required: false
          type: string
      responses:
        405:
          description: Input not valid
  '/{eventId}/newcar':
    post:
      tags:
      - "Car"
      summary: Add Car to Event
      description: ''
      operationId: addCartoEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: eventId
          type: string
          description: Add a car
          required: true
      responses:
        405:
          description: Input not valid
  '/{eventId}/cars':
    get:
      tags:
      - "Car"
      summary: List of cars
      description: ''
      operationId: getCarsById
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: ''
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Car'
        400:
          description: Invalid ID supplied
        404:
          description: Car not found
  '/car/{carId}':
    get:
      tags:
      - "Car"
      summary: Find Car by Id
      description: ''
      operationId: getCarById
      produces:
        - application/json
      parameters:
        - name: carId
          in: path
          description: Car Id to find
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Car'
        400:
          description: Invalid ID supplied
        404:
          description: Car not found
    put:
      tags:
      - "Car"
      summary: Update Data of Car
      description: ''
      operationId: updateCar
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: carId
          in: path
          description: ''
          required: true
          type: string
        - name: carName
          in: formData
          description: Update name of car
          required: false
          type: string
        - name: seats
          in: formData
          description: Update seats of car
          required: false
          type: number
        - name: message
          in: formData
          description: Update message of car
          required: false
          type: string
        - name: contact
          in: formData
          description: Update contact of car
          required: false
          type: string
        - name: address
          in: formData
          description: Update address of meeting
          required: false
          type: string
        - name: date
          in: formData
          description: Update date of meeting
          required: false
          type: string
        - name: time
          in: formData
          description: Update time of meeting
          required: false
          type: string
      responses:
        405:
          description: Input not valid
    delete:
      tags:
      - "Car"
      summary: Delete a Car
      description: ''
      operationId: deleteCar
      produces:
        - application/json
      parameters:
        - name: body
          in: header
          required: false
          type: string
        - name: carId
          in: path
          description: Car id to delete
          required: true
          type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Car not found
  '/{carId}/passengersCar':
    post:
      tags:
      - "Passengers"
      summary: Add Passengers to Car
      description: ''
      operationId: addPassengersCar
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: carId
          description: Add passengers to car
          type: string
          required: true
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Passengers'
      responses:
        200:
          description: successful operation
        422:
          description: 'Your name cannot be blank'
  '/{eventId}/passengersEvent':
    post:
      tags:
      - "Passengers"
      summary: Add Passengers to Event
      description: ''
      operationId: AddPassengersEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: eventId
          type: string
          description: Add passengers to event
          required: true
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Passengers'
      responses:
        405:
          description: Input not valid
  '/passengers/{passengersId}':
    put:
      tags:
      - "Passengers"
      summary: Update data of Passengers
      description: ''
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: passengersId
          in: path
          description: Passengers Id to update
          required: true
          type: string
        - name: name
          in: formData
          description: Update passengers
          required: false
          type: string
      responses:
        405:
          description: Input not valid
    delete:
      tags:
      - "Passengers"
      summary: Delete Passengers
      description: ''
      produces:
        - application/json
      parameters:
        - name: body
          in: header
          required: false
          type: string
        - name: passengersId
          in: path
          description: Passengers Id to delete
          required: true
          type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Passenger not found
  '/event/{eventId}/passengers':
    get:
      tags:
      - "Passengers"
      summary: List of Passengers from Event
      description: Show List of Passengers from Event
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: ''
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Invalid ID supplied
        404:
          description: Passengers not found
  '/car/{eventId}/passengers':
    get:
      tags:
      - "Passengers"
      summary: List of Passengers from Event Car
      description: Show Passengers from Event Car
      produces:
        - application/json
      parameters:
        - name: eventId
          in: path
          description: ''
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Invalid ID supplied
        404:
          description: Passengers not found
  /register:
    post:
      tags:
      - "User"
      summary: Add an User
      description: ''
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation
        500:
          description: error registration user
  '/user/{userId}':
    get:
      tags:
      - "User"
      summary: Find User by id
      description: ''
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
    put:
      tags:
      - "User"
      summary: Update User Data
      description: ''
      operationId: updateUser
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: string
        - name: name
          in: formData
          description: Update name of user
          required: false
          type: string
        - name: contact
          in: formData
          description: Update contact of user
          required: false
          type: number
        - name: email
          in: formData
          description: Update email of user
          required: false
          type: string
        - name: password
          in: formData
          description: Update password of user
          required: false
          type: string
      responses:
        200:
          description: successful operation
    delete:
      tags:
      - "User"
      summary: Delete an User
      description: ''
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: body
          in: header
          required: false
          type: string
        - name: userId
          in: path
          description: User Id to delete
          required: true
          type: string
      responses:
        200:
          description: successful operation
  /authenticate:
    get:
      tags:
      - "User"
      summary: "Logs user into the site"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /logout:
    get:
      tags:
      - "User"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
definitions:
  Event:
    type: object
    required:
      - title
      - email
    properties:
      id:
        type: string
      title:
        type: string
      email:
        type: string
      car:
        type: array
        items:
          $ref: '#/definitions/Car'
      passengers:
        type: array
        items:
          $ref: '#/definitions/Passengers'
  Car:
    type: object
    required:
      - carName
      - seats
      - message
      - contact
      - address
      - date
      - time
    properties:
      id:
        type: string
      carName:
        type: string
      seats:
        type: number
      message:
        type: string
      contact:
        type: string
      address:
        type: string
      date:
        type: string
      time:
        type: string
      passengers:
        type: array
        items:
          $ref: '#/definitions/Passengers'
  Passengers:
    type: object
    required:
      - name
    properties:
      id:
        type: string
      name:
        type: string
  User:
    type: object
    required:
      - name
      - contact
      - email
      - password
    properties:
      id:
        type: string
      name:
        type: string
      contact:
        type: string
      email:
        type: string
      password:
        type: string
      
